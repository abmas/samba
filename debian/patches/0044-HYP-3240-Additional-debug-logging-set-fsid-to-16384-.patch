From: Ashok Ramakrishnan <ashok.ramakrishnan@simplivity.com>
Date: Fri, 24 Mar 2017 19:52:10 +0000
Subject: HYP-3240: Additional debug logging, set fsid to 16384 always.

---
 source3/modules/vfs_default.c | 15 +++------------
 source3/smbd/durable.c        |  4 ++++
 2 files changed, 7 insertions(+), 12 deletions(-)

diff --git a/source3/modules/vfs_default.c b/source3/modules/vfs_default.c
index a35ddaa..e213b22 100644
--- a/source3/modules/vfs_default.c
+++ b/source3/modules/vfs_default.c
@@ -1002,18 +1002,9 @@ static int vfswrap_fsync(vfs_handle_struct *handle, files_struct *fsp)
 
 static void vfswrap_set_fsid (vfs_handle_struct *handle, SMB_STRUCT_STAT * sbuf)
 {
-	connection_struct *conn = handle->conn;
-	struct vfs_statvfs_struct statbuf;
-	int ret;
-	uint64_t fsid;
-	ZERO_STRUCT(statbuf);
-	ret = sys_statvfs(conn->connectpath, &statbuf);
-	if (ret == 0 && statbuf.FsIdentifier != 0 ) {
-		DEBUG(10,("dev id before setting %llu\n",sbuf->st_ex_dev));
-		fsid = statbuf.FsIdentifier;
-		DEBUG(10,("setting fsid to %llu\n",fsid));
-		sbuf->st_ex_dev = fsid;
-	}
+	uint64_t fsid = 16384;
+	DEBUG(10,("dev id before setting %lu, setting to %lu\n",sbuf->st_ex_dev,fsid));
+	sbuf->st_ex_dev = fsid;
 }
 
 static int vfswrap_stat(vfs_handle_struct *handle,
diff --git a/source3/smbd/durable.c b/source3/smbd/durable.c
index e74d85b..79614e2 100644
--- a/source3/smbd/durable.c
+++ b/source3/smbd/durable.c
@@ -605,10 +605,12 @@ NTSTATUS vfs_default_durable_reconnect(struct connection_struct *conn,
 	}
 
 	if (!cookie.allow_reconnect) {
+		DEBUG(10,("cookie.allow_reconnect not set. returning NT_STATUS_OBJECT_NAME_NOT_FOUND\n"));
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 
 	if (strcmp(cookie.servicepath, conn->connectpath) != 0) {
+		DEBUG(10,("cookie.servicepath doesn't match. returning NT_STATUS_OBJECT_NAME_NOT_FOUND\n"));
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 
@@ -629,11 +631,13 @@ NTSTATUS vfs_default_durable_reconnect(struct connection_struct *conn,
 	}
 
 	if (!S_ISREG(smb_fname->st.st_ex_mode)) {
+		DEBUG(10,("smb_fname->st.st_ex_mode incorrect\n"));
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 
 	file_id = vfs_file_id_from_sbuf(conn, &smb_fname->st);
 	if (!file_id_equal(&cookie.id, &file_id)) {
+		DEBUG(10,("file id mismatch cookie = %llu, stat = %llu\n",cookie.id.devid, file_id.devid));
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 
